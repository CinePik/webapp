/**
 * CinePik Watchlist API
 * The CinePik Watchlist microservice.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AddMovieWatchlistDto } from '../model/models';
import { CreateMovieCommentDto } from '../model/models';
import { MovieCommentResponseDto } from '../model/models';
import { UpdateMovieCommentDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface MoviesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Add a movie to the watchlist
     * Adds a movie to the user watchlist.
     * @param addMovieWatchlistDto 
     */
    moviesControllerAddMovieWatchlist(addMovieWatchlistDto: AddMovieWatchlistDto, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create movie comment
     * Creates a user movie comment.
     * @param createMovieCommentDto 
     */
    moviesControllerCreateMovieComment(createMovieCommentDto: CreateMovieCommentDto, extraHttpRequestParams?: any): Observable<Array<MovieCommentResponseDto>>;

    /**
     * Returns all movie comments
     * Returns all movies comments for a specific movie.
     * @param movieId 
     */
    moviesControllerFindAllMovieComments(movieId: string, extraHttpRequestParams?: any): Observable<Array<MovieCommentResponseDto>>;

    /**
     * Returns all movie recommendations
     * Returns all movies recommendations based on user watchlist.
     * @param userId 
     */
    moviesControllerGetMovieRecommendations(userId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns all movies on the watchlist
     * Returns all movies on the user watchlist.
     * @param userId 
     */
    moviesControllerGetMovieWatchlist(userId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Deletes a movie comment
     * Deletes a specific movie comment.
     * @param id 
     */
    moviesControllerRemove(id: string, extraHttpRequestParams?: any): Observable<Array<MovieCommentResponseDto>>;

    /**
     * Deletes a movie from the watchlist
     * Deletes a movie from the user watchlist.
     * @param id 
     */
    moviesControllerRemoveMovieWatchlist(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Updates movie comment
     * Updates a specific movie comment.
     * @param id 
     * @param updateMovieCommentDto 
     */
    moviesControllerUpdate(id: string, updateMovieCommentDto: UpdateMovieCommentDto, extraHttpRequestParams?: any): Observable<Array<MovieCommentResponseDto>>;

}
